<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on MID-S</title>
    <link>https://midsatoh.github.io/tags/python/</link>
    <description>Recent content in python on MID-S</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 20 Nov 2019 13:23:47 +0900</lastBuildDate>
    
	<atom:link href="https://midsatoh.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pythonの特徴</title>
      <link>https://midsatoh.github.io/python/python_aspects/</link>
      <pubDate>Mon, 18 Nov 2019 09:40:10 +0900</pubDate>
      
      <guid>https://midsatoh.github.io/python/python_aspects/</guid>
      <description>利用面での特徴 Pythonをこれから利用する側からみた特徴としては「豊富なライブラリ」「様々なサイトやサービスで利用されている実績」が有利な特徴と言える。特に、ライブラリについては多岐にわたっている。
 画像／動画処理 数値計算／統計処理 ファイル入出力処理 データベース処理 ネットワーク処理  などの、自力で作成するには複雑な作業やセキュリティの考慮などが必要な処理や、多くの場所で利用可能な処理について、様々なライブラリが配布されている。 このようなライブラリを利用し、組み合わせることで用途に合わせたプログラムを作成することが可能となっている。
実装面での特徴 Pythonを使って実際にプログラムを作成する・実装する立場から見た特徴としては、「学習コストの低さ」が大きな特徴と言えるであろう。
例えば、「変数numに代入された値が10より大きい場合は&amp;quot;Over 10&amp;quot;と表示、そうでなければ&amp;quot;Other&amp;quot;と表示」というプログラムを、Javaで書いた場合とPythonで書いた場合で比較してみる。
Javaで書いた場合(その1) class Sample { public static void main(String[] args){ int num = 11; if (num &amp;gt; 10){ System.out.println(&amp;#34;Over 10&amp;#34;); } else { System.out.println(&amp;#34;Other&amp;#34;); } } } Javaで書いた場合(その2) class Sample { public static void main(String[] args){ int num = 11; if (num &amp;gt; 10) System.out.println(&amp;#34;Over 10&amp;#34;); else System.out.println(&amp;#34;Other&amp;#34;); } } Pythonで書いた場合 num = 11 if num &amp;gt; 10: print(&amp;#39;Over 10&amp;#39;) else: print(&amp;#39;Other&amp;#39;) Javaの場合、同じ内容を記載した場合でも{}の有無、インデント（字下げ）の位置などが揃っていなくとも記述が可能。また、スクリプトを実行する場合でも必ずクラスが必要であるなどのルールが複雑である。 Pythonの場合、スクリプト実行の場合は必要な処理をファイルに記載するのみで実行が可能である。また、記述ルールにインデント（字下げ）が含まれるため、Pythonの初心者でも、熟練者でも同一の内容であれば基本的な記述方法は同じである。</description>
    </item>
    
    <item>
      <title>Pythonインストーラによるインストール</title>
      <link>https://midsatoh.github.io/python/install/install_soft/</link>
      <pubDate>Tue, 19 Nov 2019 14:31:47 +0900</pubDate>
      
      <guid>https://midsatoh.github.io/python/install/install_soft/</guid>
      <description>インストーラの入手 インストーラは、Pythonの公式サイトから入手する。
Python公式サイト：https://www.python.org/
公式サイトの「Downloads」リンクからダウンロード可能。 ただし、Downloadsに記載されているボタンからダウンロードすると32bit版のインストーラになるため、必ずOS別のリンクに一度移動する。
OSの選択が完了したら、バージョンの選択をする。 先頭にアクセス時の最新バージョンが記載されているため、そちらを選択する。
バージョン別のダウンロードサイトへ移動する。
ダウンロードサイトの下部に、OS別のインストーラを選択するリンクがあるため、そちらからOS別のインストーラを使用してインストールする。
Macの場合はpkgファイル、Windowsの場合はexeファイルがダウンロードされるため、ダウンロード後は指示に従ってインストールする。
インストール 基本的にはデフォルト設定のままでインストールする。
インストールの確認 コマンドプロンプト（Macの場合はターミナル）を起動し、Macの場合はpython3、Windowsの場合はpythonコマンドを実行する。 実行結果が以下のような画面となればインストール完了。
終了する場合は、quit()またはexit()を入力し、終了させる。
&amp;gt;&amp;gt;&amp;gt; quit() </description>
    </item>
    
    <item>
      <title>Anacondaのインストール</title>
      <link>https://midsatoh.github.io/python/install/anaconda/</link>
      <pubDate>Wed, 20 Nov 2019 08:29:31 +0900</pubDate>
      
      <guid>https://midsatoh.github.io/python/install/anaconda/</guid>
      <description>Anacondaとは Pythonでは数値計算やデータ解析、グラフの描画などを作成することができるが、その際に必要なライブラリは通常pipコマンドなどで自身でインストールする。 Anacondaとは、このような計算系の作業に必要なライブラリやツールを一括でインストールすることができるディストリビューション（ツール群）である。
Anacondaで用意されている主なライブラリ    ライブラリ名 概要     NumPy 多次元配列、ベクトルなどの数値計算で主に利用されるデータ型や関数など   SciPy 線形代数や積分などの科学技術計算など   Matplotlib グラフ描画に必要な関数など   Pandas 数表や時系列データなどを使用し、データ解析を行うデータ型や関数など    Anacondaに含まれる主なツール    ツール名 概要     conda パッケージ管理・仮想環境構築   JupyterLab/Jupyter Notebook Webベースの統合開発環境   Spyder 統合開発環境    Anacondaのダウンロード Anaconda公式サイト：https://www.anaconda.com/distribution/
公式サイトのdownloadボタン、またはページ下部に移動するとダウンロード用のリンクがある。
Python3系を利用しているAnacondaを選択し、ダウンロードを開始する。Windowsの場合はexeファイル、Macの場合はpkgファイルがダウンロードされる。
Anacondaのインストール 基本的にはデフォルトでインストールする。 Anacondaはツールなども含まれるため、インストールには時間がかかる。
Windows版のインストールについて：Anaconda公式ドキュメント Installing on Windows
Mac版のインストールについて：Anaconda公式ドキュメント Installing on macOS</description>
    </item>
    
    <item>
      <title>pyenvによるインストール</title>
      <link>https://midsatoh.github.io/python/install/pyenv/</link>
      <pubDate>Thu, 14 Nov 2019 13:14:00 +0900</pubDate>
      
      <guid>https://midsatoh.github.io/python/install/pyenv/</guid>
      <description>pyenvとは Macのように、OSにPythonがプリインストールされているようなマシンを利用する場合、インストーラなどでpythonをインストールしてPATHを切り替えてしまったり、PythonのバージョンによってはOSの挙動や別のアプリケーションに影響を及ぼす可能性がある。
そのため、macOSではOSプリインストールのPythonはpython、インストーラでインストールした場合のPython3系についてはpython3というコマンドを使用することで切り替えているが、今後macOSのアップデートによりOSプリインストールのPythonバージョンが変わった場合どのようになるかは不明な部分が多い。
また、マイナーバージョン（3.5と3.8など）を複数インストールする必要がある場合はインストーラとaliasを切り替えるなどで対応可能だが、パッチバージョン（3.6.0と3.6.5など）を同一のマシンにインストールすることができない。
そこで、Macで複数のPythonをインストールし、開発環境を切り替えるためのツールがpyenvである。
pyenvをインストールするには、MacportやHomebrewというMacでのパッケージ管理システムを利用してインストールすることが多い。
本サイトでは、Homebrewからpyenvをインストールする。 Homebrewが未インストールの場合は、Homebrewのインストール を参考とすること。
pyenvのインストール homebrewがインストールされると、brewコマンドが利用可能となる。brew install インストールするパッケージで様々な開発ツールがインストール可能となる。
brew installコマンドを実施する際には、インターネットに接続されている必要がある。 pyenvのインストールは、以下のコマンドとなる。
% brew install pyenv Mac OS Catalinaからは、ターミナルのデフォルトシェルがbashからzshとなった。 そのため、pyenvの設定内容を~/.zprofileに以下を追加する。
export PYENV_ROOT=${HOME}/.pyenv if [ -d &amp;#34;${PYENV_ROOT}&amp;#34; ]; then export PATH=${PYENV_ROOT}/bin:$PATH eval &amp;#34;$(pyenv init -)&amp;#34; fi  zshではなくbashを利用しているMacの場合は、上記の内容は「~/.bash_profile」に記載する。
 pyenvインストールの確認 pyenvのコマンドを実行し、インストールが完了しているか確認する。 今回はpyenvでインストールできるバージョンの一覧を表示させてみる。
% pyenv install -l Available versions: 2.1.3 2.2.3 2.3.7 2.4 2.4.1 2.4.2 2.4.3 2.4.4 .........  pyenv install -l でインストールしたいバージョンが表示されない場合は、pyenvのバージョンが古くなっている場合がある。 その場合は、pyenv自体のアップグレードを行う必要がある。pyenvのアップグレードコマンドは以下の通り。
% brew upgrade pyenv  pyenvによる使用バージョンのインストール pyenv install バージョン指定で必要なバージョンのインストールが可能となる。 例えば、3.</description>
    </item>
    
    <item>
      <title>pyenv-winによるインストール</title>
      <link>https://midsatoh.github.io/python/install/pyenv-win/</link>
      <pubDate>Wed, 20 Nov 2019 13:23:47 +0900</pubDate>
      
      <guid>https://midsatoh.github.io/python/install/pyenv-win/</guid>
      <description>pyenv-winとは Windows環境で、Macと同様にPythonのバージョンを切り替えて使用したい場合に利用するツールである。 Windows環境では、Python3.6とPython3.8などを切り替える程度であればインストーラで複数のバージョンをインストールするのみで問題はない。 しかし、例えばPython3.6.5とPython3.6.9を切り替える必要がある、などの細かい変更が必要な場合は、Macと同様にpyenvによる環境切り替えが必要になる。 このような環境切り替えを可能にするのが、pyenv-win(pyenv for Windows)である。
pyenv-winのインストール pyenv-winは事前にインストーラでPythonをインストールしておく必要がある。 まだインストールしていない場合は、Pythonインストーラによるインストールでインストールしておく。
Pythonがインストールされたら、pipコマンドを使用してpyenv-winをインストールする。
&amp;gt; pip install pyenv-win --target %USERPROFILE%/.pyenv pyenv-winのインストールが完了したら、環境変数に次の値を追加する。 Windows10のスタートボタン-&amp;gt;設定で検索画面に「環境変数」と入力する。
環境変数画面から、Pathが設定されている箇所を選び、編集ボタンを押す。もしPathが存在しない場合は新規でPathを作成する。
追加ボタンを押下し、以下の2つを追加する。
 %USERPROFILE%.pyenv\pyenv-win\bin %USERPROFILE%.pyenv\pyenv-win\shims  すでにインストール済みのPythonのフォルダに環境変数が設定済みの場合は、今回追加したPathが先頭になるように上へや下へボタンを使って移動する。
設定が完了したら、OKボタンを押して設定を終了する。
pyenv-winによるインストールおよび切り替えはMacと同様なのでpyenvによるインストール（Mac） を参考とすること。</description>
    </item>
    
  </channel>
</rss>