<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>eclipse on MID-S</title>
    <link>https://midsatoh.github.io/tags/eclipse/</link>
    <description>Recent content in eclipse on MID-S</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 25 Nov 2019 09:12:42 +0900</lastBuildDate>
    
	<atom:link href="https://midsatoh.github.io/tags/eclipse/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>インストール方法の選択</title>
      <link>https://midsatoh.github.io/python/install/select_soft/</link>
      <pubDate>Wed, 20 Nov 2019 16:44:20 +0900</pubDate>
      
      <guid>https://midsatoh.github.io/python/install/select_soft/</guid>
      <description>バージョンやソフトウェアの選択方法 Pythonのインストール方法は、利用する環境やプログラムの方針によって選択する必要がある。
mermaid.initialize({startOnLoad:true}); graph LR; A{複数の
パッチバージョン*注
の切り替え} A --|必要| B[pyenvまたはpyenv-winで
インストールする] A --|不要| C{統計などで
利用する} C --|利用する| D[Anacondaを
インストールする] C --|利用しない or
わからない| E[Pythonインストーラで
インストールする]   注：3.6.0と3.6.5などのバージョン違い。  </description>
    </item>
    
    <item>
      <title>Mavenプロジェクトの作成</title>
      <link>https://midsatoh.github.io/java/spring/maven/</link>
      <pubDate>Mon, 25 Nov 2019 09:12:42 +0900</pubDate>
      
      <guid>https://midsatoh.github.io/java/spring/maven/</guid>
      <description>Mavenとは Mavenとは、プログラム開発を行う際のコンパイル・テストなどのコマンドやライブラリの自動配置などを担うためのツール群である。 Javaでは、開発環境や実行環境におけるJVMのバージョンやライブラリのバージョンなどが相互に影響しているため、手作業で環境を作成するためには幅広い知識が必要になる。 また、ライブラリによっては相互関係のあるライブラリが多岐にわたっており、それぞれのバージョンを手作業で合わせるのはかなり困難であり、開発者間で環境を合わせることも そのため、ライブラリ管理やコンパイル時・実行時のパス設定などを自動的に設定するためのツールとしてMavenやGradle、過去にはAntが多くのプロジェクトで利用されている。
統合開発ツールであるEclipseでは、最新の2019.09ではMavenとGradleについては標準で対応している。
Mavenでできること Mavenは以下のようなコマンドが用意されている。
   コマンド 概要     mvn architype:generate Mavenプロジェクトを作成する   mvn validate プロジェクトの配置やコンパイルエラーなどがないかを確認する（コンパイルは未実行）   mvn compile プロジェクトのコンパイルを実行し、targetディレクトリを作成する   mvn test テスト（JUnit）を実行する   mvn package jarやwarなどの成果物を作成する（valiate、compile、testを実行し、問題がなければ作成）   mvn install ローカルのリポジトリにパッケージングされた成果物を配置する   mvn deploy インターネット上のリポジトリにパッケージを配置する   mvn clean targetディレクトリを削除し、コンパイル前の状態に戻す   mvn javadoc:javadoc JavaDocを作成する    Mavenのディレクトリ構成 Mavenプロジェクトの標準ディレクトリ構成は以下の通り。 基本的にはデフォルトのまま利用する。
プロジェクトルート |--- LICENSE.txt # プロジェクトのライセンス情報を記述するファイル |--- README.</description>
    </item>
    
    <item>
      <title>Eclipseのインストールと設定</title>
      <link>https://midsatoh.github.io/java/install/eclipse/</link>
      <pubDate>Wed, 30 Oct 2019 14:01:47 +0900</pubDate>
      
      <guid>https://midsatoh.github.io/java/install/eclipse/</guid>
      <description>Eclipseのインストール Javaの開発用IDEと言えば、基本的に無償で利用可能であるEclipseや有償だが高機能なIntellJ IDEAなどが有名。
Eclipse2018からはMergeDoc ProjectにてSpringToolSuiteも日本語プラグインPleiadesと同梱されるようになったためこちらを利用することにする。
MergeDoc Project公式サイト：https://mergedoc.osdn.jp
自身のプラットフォームに合わせ、JavaのFull Editionをダウンロードし、zipファイルの解凍をする。
Eclipseの環境設定 インストールしたOpenJDKをEclipseで適用させるためには、JREの設定が必要となる。
Eclipseの設定（Windowsの場合は[ウィンドウ] -&amp;gt; [設定]、Macの場合は[Eclipse]-&amp;gt;[環境設定])より、[Java]-&amp;gt;[インストール済みのJRE]を開く。
[追加]ボタンを押下し、標準VMを選択する。
[JREホーム]のディレクトリで、AdoptOpenJDKをインストールした箇所を選択する。JRE名は任意。
デフォルトのインストール場所は以下の通り。
 Windows : C:\Program Files (x86)\AdoptOpenJDK\jdk-11.0.X.XX-hotspot Mac : /Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home  追加後、追加したJREにチェックを入れてから適用するとデフォルトでAdoptOpenJDKを利用して実行される。</description>
    </item>
    
  </channel>
</rss>