<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MID-S</title>
    <link>https://midsatoh.github.io/</link>
    <description>Recent content on MID-S</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 19 Nov 2019 11:19:15 +0900</lastBuildDate>
    
	<atom:link href="https://midsatoh.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kotlin基礎文法</title>
      <link>https://midsatoh.github.io/kotlin/basic/</link>
      <pubDate>Tue, 24 Dec 2019 10:04:27 +0900</pubDate>
      
      <guid>https://midsatoh.github.io/kotlin/basic/</guid>
      <description>サンプルコードはKotlin公式リファレンスKotlin公式リファレンス：https://kotlinlang.org/docs/reference/に補足・和訳した物を利用している。
関数 main関数 プログラム全体のエントリポイント（実行開始ポイント）となるのが、main関数である。 拡張子（.kt）のファイルに作成する。
fun main(){ println(&amp;#34;Hello World!&amp;#34;) } 関数の作成 エントリポイントの他に、処理の集まりとして関数を作成することができる。
fun 関数名(仮引数:仮引数の型, ・・・): 戻り値の型 { 関数内の処理 return 戻り値 } 例えば、仮引数の加算結果を戻り値とする関数は以下の通りとなる。
fun sum(a:Int, b:Int):Int { return a + b } 処理が単文で記述可能な場合、戻り値の型やブロックを省略することができる。
fun sum(a:Int, b:Int) = a + b 戻り値なしの関数の場合、戻り値の型はUnitである。
fun sumPrint(a:Int, b:Int):Unit { println(&amp;#34;$a と $b の加算の結果は ${a + b}&amp;#34;) } Unit型は省略が可能である。
fun sumPrint(a:Int, b:Int) { println(&amp;#34;$a と $b の加算の結果は ${a + b}&amp;#34;) } 変数 再代入不可の変数定義 Kotlinの場合、再代入ができない変数の定義にはvalキーワードを用いる。
val 変数名: データ型 = 初期値 val 変数名 = データ型 // 型推論による代入 val 変数名: データ型 // 変数定義 変数名 = 初期値 // 初期値の代入 例えば、Int型の変数にそれぞれ初期値を代入する方法は以下の通りである。</description>
    </item>
    
    <item>
      <title>インストール方法の選択</title>
      <link>https://midsatoh.github.io/python/install/select_soft/</link>
      <pubDate>Wed, 20 Nov 2019 16:44:20 +0900</pubDate>
      
      <guid>https://midsatoh.github.io/python/install/select_soft/</guid>
      <description>バージョンやソフトウェアの選択方法 Pythonのインストール方法は、利用する環境やプログラムの方針によって選択する必要がある。
mermaid.initialize({startOnLoad:true}); graph LR; A{複数の
パッチバージョン*注
の切り替え} A --|必要| B[pyenvまたはpyenv-winで
インストールする] A --|不要| C{統計などで
利用する} C --|利用する| D[Anacondaを
インストールする] C --|利用しない or
わからない| E[Pythonインストーラで
インストールする]   注：3.6.0と3.6.5などのバージョン違い。  </description>
    </item>
    
    <item>
      <title>Pythonの特徴</title>
      <link>https://midsatoh.github.io/python/python_aspects/</link>
      <pubDate>Mon, 18 Nov 2019 09:40:10 +0900</pubDate>
      
      <guid>https://midsatoh.github.io/python/python_aspects/</guid>
      <description>利用面での特徴 Pythonをこれから利用する側からみた特徴としては「豊富なライブラリ」「様々なサイトやサービスで利用されている実績」が有利な特徴と言える。特に、ライブラリについては多岐にわたっている。
 画像／動画処理 数値計算／統計処理 ファイル入出力処理 データベース処理 ネットワーク処理  などの、自力で作成するには複雑な作業やセキュリティの考慮などが必要な処理や、多くの場所で利用可能な処理について、様々なライブラリが配布されている。 このようなライブラリを利用し、組み合わせることで用途に合わせたプログラムを作成することが可能となっている。
実装面での特徴 Pythonを使って実際にプログラムを作成する・実装する立場から見た特徴としては、「学習コストの低さ」が大きな特徴と言えるであろう。
例えば、「変数numに代入された値が10より大きい場合は&amp;quot;Over 10&amp;quot;と表示、そうでなければ&amp;quot;Other&amp;quot;と表示」というプログラムを、Javaで書いた場合とPythonで書いた場合で比較してみる。
Javaで書いた場合(その1) class Sample { public static void main(String[] args){ int num = 11; if (num &amp;gt; 10){ System.out.println(&amp;#34;Over 10&amp;#34;); } else { System.out.println(&amp;#34;Other&amp;#34;); } } } Javaで書いた場合(その2) class Sample { public static void main(String[] args){ int num = 11; if (num &amp;gt; 10) System.out.println(&amp;#34;Over 10&amp;#34;); else System.out.println(&amp;#34;Other&amp;#34;); } } Pythonで書いた場合 num = 11 if num &amp;gt; 10: print(&amp;#39;Over 10&amp;#39;) else: print(&amp;#39;Other&amp;#39;) Javaの場合、同じ内容を記載した場合でも{}の有無、インデント（字下げ）の位置などが揃っていなくとも記述が可能。また、スクリプトを実行する場合でも必ずクラスが必要であるなどのルールが複雑である。 Pythonの場合、スクリプト実行の場合は必要な処理をファイルに記載するのみで実行が可能である。また、記述ルールにインデント（字下げ）が含まれるため、Pythonの初心者でも、熟練者でも同一の内容であれば基本的な記述方法は同じである。</description>
    </item>
    
    <item>
      <title>OpenJDKのインストール</title>
      <link>https://midsatoh.github.io/java/install/openjdk/</link>
      <pubDate>Wed, 30 Oct 2019 11:03:04 +0900</pubDate>
      
      <guid>https://midsatoh.github.io/java/install/openjdk/</guid>
      <description>OpenJDK OracleJavaが有償化されたため、現在無償でJavaでの開発を行う際にはOpenJDKを利用する必要がある。
OpenJDK公式サイト：http://openjdk.java.net
よりソースコードからコンパイルする方法もあるが、初級者が学習する際にはバイナリでの提供を行っている団体のサイトより取得する。
今回は、様々なプラットフォームに対応済みであるAdoptOpenJDKを利用する。
AdoptOpenJDK公式サイト：https://adoptopenjdk.net
AdoptOpenJDK 公式サイトにアクセスすると、以下のような画面となる。
  Choose a Version
 OpenJDKのバージョンを指定する。基本的にLTS（long term support：長期間サポートあり)を選択する。    Choose a JVM
 JavaVMを指定する。HotSpotはサン・マイクロシステムズが開発したオリジナルのJVM、OpenJ9はIBMが開発した別実装のJVMとなる。基本的にはHotSpotで問題ない。    ダウンロード
 1、2 を指定後、ダウンロード可能となる。基本的にサイトにアクセスしたプラットフォームで利用可能なバージョンがダウンロード可能となるが、必要に応じてOther platformsのリンクより別のプラットフォーム向けのダウンロードも可能。    インストール
 macの場合はpkgファイル、Windowsの場合はmsiファイルでのダウンロードとなるため、実行後は指示に従ってインストールを実施する。    </description>
    </item>
    
    <item>
      <title>forEachの使い方</title>
      <link>https://midsatoh.github.io/kotlin/foreach/</link>
      <pubDate>Wed, 25 Dec 2019 13:35:19 +0900</pubDate>
      
      <guid>https://midsatoh.github.io/kotlin/foreach/</guid>
      <description>forEach関数 Collectionに対してループ処理を行う構文としては、forがある。
val list = listOf&amp;lt;String&amp;gt;(&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;) for(s:String in list){ print(&amp;#34;$s &amp;#34;) } 似たような形で、Collectionの要素1つ1つに対する処理を実行したい場合はforEach関数を利用することができる。
val list = listOf&amp;lt;String&amp;gt;(&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;) list.forEach { print(&amp;#34;$it &amp;#34;) } // it : リストの要素1つを表す 関数なので、戻り値を返すことも可能。（ただし戻り値はUnit）
val list = listOf&amp;lt;String&amp;gt;(&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;) val result = list.forEach { print(&amp;#34;$it &amp;#34;) } // resultの値はUnit型 関数なので、breakは利用不可（continueは使える）。どうしてもbreakを利用したい場合はラベルとreturnによるループ停止を利用する。
val list = listOf&amp;lt;String&amp;gt;(&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;) list.forEach { if (it != &amp;#34;b&amp;#34;) print(&amp;#34;$it &amp;#34;) else return@forEach // forEachに対してreturn(ループの終了)を行う } ただし、基本的にはループの制御が必要な場合などはforEachではなくfor文を利用した方が可読性が高くなる。</description>
    </item>
    
    <item>
      <title>Mavenプロジェクトの作成</title>
      <link>https://midsatoh.github.io/java/spring/maven/</link>
      <pubDate>Mon, 25 Nov 2019 09:12:42 +0900</pubDate>
      
      <guid>https://midsatoh.github.io/java/spring/maven/</guid>
      <description>Mavenとは Mavenとは、プログラム開発を行う際のコンパイル・テストなどのコマンドやライブラリの自動配置などを担うためのツール群である。 Javaでは、開発環境や実行環境におけるJVMのバージョンやライブラリのバージョンなどが相互に影響しているため、手作業で環境を作成するためには幅広い知識が必要になる。 また、ライブラリによっては相互関係のあるライブラリが多岐にわたっており、それぞれのバージョンを手作業で合わせるのはかなり困難であり、開発者間で環境を合わせることも そのため、ライブラリ管理やコンパイル時・実行時のパス設定などを自動的に設定するためのツールとしてMavenやGradle、過去にはAntが多くのプロジェクトで利用されている。
統合開発ツールであるEclipseでは、最新の2019.09ではMavenとGradleについては標準で対応している。
Mavenでできること Mavenは以下のようなコマンドが用意されている。
   コマンド 概要     mvn architype:generate Mavenプロジェクトを作成する   mvn validate プロジェクトの配置やコンパイルエラーなどがないかを確認する（コンパイルは未実行）   mvn compile プロジェクトのコンパイルを実行し、targetディレクトリを作成する   mvn test テスト（JUnit）を実行する   mvn package jarやwarなどの成果物を作成する（valiate、compile、testを実行し、問題がなければ作成）   mvn install ローカルのリポジトリにパッケージングされた成果物を配置する   mvn deploy インターネット上のリポジトリにパッケージを配置する   mvn clean targetディレクトリを削除し、コンパイル前の状態に戻す   mvn javadoc:javadoc JavaDocを作成する    Mavenのディレクトリ構成 Mavenプロジェクトの標準ディレクトリ構成は以下の通り。 基本的にはデフォルトのまま利用する。
プロジェクトルート |--- LICENSE.txt # プロジェクトのライセンス情報を記述するファイル |--- README.</description>
    </item>
    
    <item>
      <title>Pythonインストーラによるインストール</title>
      <link>https://midsatoh.github.io/python/install/install_soft/</link>
      <pubDate>Tue, 19 Nov 2019 14:31:47 +0900</pubDate>
      
      <guid>https://midsatoh.github.io/python/install/install_soft/</guid>
      <description>インストーラの入手 インストーラは、Pythonの公式サイトから入手する。
Python公式サイト：https://www.python.org/
公式サイトの「Downloads」リンクからダウンロード可能。 ただし、Downloadsに記載されているボタンからダウンロードすると32bit版のインストーラになるため、必ずOS別のリンクに一度移動する。
OSの選択が完了したら、バージョンの選択をする。 先頭にアクセス時の最新バージョンが記載されているため、そちらを選択する。
バージョン別のダウンロードサイトへ移動する。
ダウンロードサイトの下部に、OS別のインストーラを選択するリンクがあるため、そちらからOS別のインストーラを使用してインストールする。
Macの場合はpkgファイル、Windowsの場合はexeファイルがダウンロードされるため、ダウンロード後は指示に従ってインストールする。
インストール 基本的にはデフォルト設定のままでインストールする。
インストールの確認 コマンドプロンプト（Macの場合はターミナル）を起動し、Macの場合はpython3、Windowsの場合はpythonコマンドを実行する。 実行結果が以下のような画面となればインストール完了。
終了する場合は、quit()またはexit()を入力し、終了させる。
&amp;gt;&amp;gt;&amp;gt; quit() </description>
    </item>
    
    <item>
      <title>Eclipseのインストールと設定</title>
      <link>https://midsatoh.github.io/java/install/eclipse/</link>
      <pubDate>Wed, 30 Oct 2019 14:01:47 +0900</pubDate>
      
      <guid>https://midsatoh.github.io/java/install/eclipse/</guid>
      <description>Eclipseのインストール Javaの開発用IDEと言えば、基本的に無償で利用可能であるEclipseや有償だが高機能なIntellJ IDEAなどが有名。
Eclipse2018からはMergeDoc ProjectにてSpringToolSuiteも日本語プラグインPleiadesと同梱されるようになったためこちらを利用することにする。
MergeDoc Project公式サイト：https://mergedoc.osdn.jp
自身のプラットフォームに合わせ、JavaのFull Editionをダウンロードし、zipファイルの解凍をする。
 Windows の場合はエクスプローラーによる解凍は失敗するため、7Zip(https://sevenzip.osdn.jp)などの解凍ソフトが必要になる。  Eclipseの環境設定 インストールしたOpenJDKをEclipseで適用させるためには、JREの設定が必要となる。
Eclipseの設定（Windowsの場合は[ウィンドウ] -&amp;gt; [設定]、Macの場合は[Eclipse]-&amp;gt;[環境設定])より、[Java]-&amp;gt;[インストール済みのJRE]を開く。
[追加]ボタンを押下し、標準VMを選択する。
[JREホーム]のディレクトリで、AdoptOpenJDKをインストールした箇所を選択する。JRE名は任意。
デフォルトのインストール場所は以下の通り。
 Windows : C:\Program Files (x86)\AdoptOpenJDK\jdk-11.0.X.XX-hotspot Mac : /Library/Java/JavaVirtualMachines/adoptopenjdk-11.jdk/Contents/Home  追加後、追加したJREにチェックを入れてから適用するとデフォルトでAdoptOpenJDKを利用して実行される。</description>
    </item>
    
    <item>
      <title>Anacondaのインストール</title>
      <link>https://midsatoh.github.io/python/install/anaconda/</link>
      <pubDate>Wed, 20 Nov 2019 08:29:31 +0900</pubDate>
      
      <guid>https://midsatoh.github.io/python/install/anaconda/</guid>
      <description>Anacondaとは Pythonでは数値計算やデータ解析、グラフの描画などを作成することができるが、その際に必要なライブラリは通常pipコマンドなどで自身でインストールする。 Anacondaとは、このような計算系の作業に必要なライブラリやツールを一括でインストールすることができるディストリビューション（ツール群）である。
Anacondaで用意されている主なライブラリ    ライブラリ名 概要     NumPy 多次元配列、ベクトルなどの数値計算で主に利用されるデータ型や関数など   SciPy 線形代数や積分などの科学技術計算など   Matplotlib グラフ描画に必要な関数など   Pandas 数表や時系列データなどを使用し、データ解析を行うデータ型や関数など    Anacondaに含まれる主なツール    ツール名 概要     conda パッケージ管理・仮想環境構築   JupyterLab/Jupyter Notebook Webベースの統合開発環境   Spyder 統合開発環境    Anacondaのダウンロード Anaconda公式サイト：https://www.anaconda.com/distribution/
公式サイトのdownloadボタン、またはページ下部に移動するとダウンロード用のリンクがある。
Python3系を利用しているAnacondaを選択し、ダウンロードを開始する。Windowsの場合はexeファイル、Macの場合はpkgファイルがダウンロードされる。
Anacondaのインストール 基本的にはデフォルトでインストールする。 Anacondaはツールなども含まれるため、インストールには時間がかかる。
Windows版のインストールについて：Anaconda公式ドキュメント Installing on Windows
Mac版のインストールについて：Anaconda公式ドキュメント Installing on macOS</description>
    </item>
    
    <item>
      <title>pyenvによるインストール</title>
      <link>https://midsatoh.github.io/python/install/pyenv/</link>
      <pubDate>Thu, 14 Nov 2019 13:14:00 +0900</pubDate>
      
      <guid>https://midsatoh.github.io/python/install/pyenv/</guid>
      <description>pyenvとは Macのように、OSにPythonがプリインストールされているようなマシンを利用する場合、インストーラなどでpythonをインストールしてPATHを切り替えてしまったり、PythonのバージョンによってはOSの挙動や別のアプリケーションに影響を及ぼす可能性がある。
そのため、macOSではOSプリインストールのPythonはpython、インストーラでインストールした場合のPython3系についてはpython3というコマンドを使用することで切り替えているが、今後macOSのアップデートによりOSプリインストールのPythonバージョンが変わった場合どのようになるかは不明な部分が多い。
また、マイナーバージョン（3.5と3.8など）を複数インストールする必要がある場合はインストーラとaliasを切り替えるなどで対応可能だが、パッチバージョン（3.6.0と3.6.5など）を同一のマシンにインストールすることができない。
そこで、Macで複数のPythonをインストールし、開発環境を切り替えるためのツールがpyenvである。
 pyenvはあくまで複数のPythonのバージョンをパッチレベルまで切り替えるためのツールである。 ただし、Macの場合は今後OSプリインストールのPythonとの共存がどのように扱われるか不明であるため、柔軟な対応ができるpyenvを紹介しておく。  pyenvをインストールするには、MacportやHomebrewというMacでのパッケージ管理システムを利用してインストールすることが多い。
本サイトでは、Homebrewからpyenvをインストールする。 Homebrewが未インストールの場合は、Homebrewのインストール を参考とすること。
pyenvのインストール homebrewがインストールされると、brewコマンドが利用可能となる。brew install インストールするパッケージで様々な開発ツールがインストール可能となる。
brew installコマンドを実施する際には、インターネットに接続されている必要がある。 pyenvのインストールは、以下のコマンドとなる。
% brew install pyenv Mac OS Catalinaからは、ターミナルのデフォルトシェルがbashからzshとなった。 そのため、pyenvの設定内容を~/.zprofileに以下を追加する。
export PYENV_ROOT=${HOME}/.pyenv if [ -d &amp;#34;${PYENV_ROOT}&amp;#34; ]; then export PATH=${PYENV_ROOT}/bin:$PATH eval &amp;#34;$(pyenv init -)&amp;#34; fi  zshではなくbashを利用しているMacの場合は、上記の内容は「~/.bash_profile」に記載する。 pyenvインストールの確認 pyenvのコマンドを実行し、インストールが完了しているか確認する。 今回はpyenvでインストールできるバージョンの一覧を表示させてみる。
% pyenv install -l Available versions: 2.1.3 2.2.3 2.3.7 2.4 2.4.1 2.4.2 2.4.3 2.4.4 .........  pyenv install -l でインストールしたいバージョンが表示されない場合は、pyenvのバージョンが古くなっている場合がある。その場合は、pyenv自体のアップグレードを行う必要がある。pyenvのアップグレードコマンドは以下の通り。
% brew upgrade pyenv  pyenvによる使用バージョンのインストール pyenv install バージョン指定で必要なバージョンのインストールが可能となる。 例えば、3.</description>
    </item>
    
    <item>
      <title>pyenv-winによるインストール</title>
      <link>https://midsatoh.github.io/python/install/pyenv-win/</link>
      <pubDate>Wed, 20 Nov 2019 13:23:47 +0900</pubDate>
      
      <guid>https://midsatoh.github.io/python/install/pyenv-win/</guid>
      <description>pyenv-winとは Windows環境で、Macと同様にPythonのバージョンを切り替えて使用したい場合に利用するツールである。 Windows環境では、Python3.6とPython3.8などを切り替える程度であればインストーラで複数のバージョンをインストールするのみで問題はない。 しかし、例えばPython3.6.5とPython3.6.9を切り替える必要がある、などの細かい変更が必要な場合は、Macと同様にpyenvによる環境切り替えが必要になる。 このような環境切り替えを可能にするのが、pyenv-win(pyenv for Windows)である。
 pyenvはあくまで複数のPythonのバージョンをパッチレベルまで切り替えるためのツールである。 Windows環境でpyenv-winを利用しなければいけないような状況は多くないだろうが、参考として記載する。  pyenv-winのインストール pyenv-winは事前にインストーラでPythonをインストールしておく必要がある。 まだインストールしていない場合は、Pythonインストーラによるインストールでインストールしておく。
Pythonがインストールされたら、pipコマンドを使用してpyenv-winをインストールする。
&amp;gt; pip install pyenv-win --target %USERPROFILE%/.pyenv pyenv-winのインストールが完了したら、環境変数に次の値を追加する。 Windows10のスタートボタン-&amp;gt;設定で検索画面に「環境変数」と入力する。
環境変数画面から、Pathが設定されている箇所を選び、編集ボタンを押す。もしPathが存在しない場合は新規でPathを作成する。
追加ボタンを押下し、以下の2つを追加する。
 %USERPROFILE%.pyenv\pyenv-win\bin %USERPROFILE%.pyenv\pyenv-win\shims  すでにインストール済みのPythonのフォルダに環境変数が設定済みの場合は、今回追加したPathが先頭になるように上へや下へボタンを使って移動する。
設定が完了したら、OKボタンを押して設定を終了する。
pyenv-winによるインストールおよび切り替えはMacと同様なのでpyenvによるインストール（Mac） を参考とすること。</description>
    </item>
    
    <item>
      <title>TypeScriptのインストール</title>
      <link>https://midsatoh.github.io/typescript/install/</link>
      <pubDate>Wed, 04 Dec 2019 16:01:51 +0900</pubDate>
      
      <guid>https://midsatoh.github.io/typescript/install/</guid>
      <description>TypeScriptコンパイラの取得 TypeScriptを利用するためには、TypeScriptのコンパイラが必要となる。 コンパイラはnpmで配布されているものを取得する方法が公式でも推奨されているため、まずはnpmが自身の環境で利用できるかどうかを確認する必要がある。
npmとは npm(Node Package Manager)とは、サーバーサイドJavaScript環境であるNode.jsのパッケージ管理システムである。 Node.jsをインストールするとバンドルされている。
Node.jsがインストールされているかどうかは以下のコマンドで確認する。
% node --version # Node.jsのバージョン確認用コマンド % npm --version # npmのバージョン確認用コマンド インストールされていない場合は、公式サイトからインストーラをダウンロードするか、Macの場合はHomebrewなどでインストールする。
 Node.js公式サイト（日本語） Homebrewのインストール  npmによるTypeScriptコンパイラの取得 npmが利用できる状態であれば、以下のコマンドでTypeScriptのコンパイラをインストールすることができる。
% npm install -g typescript TypeScriptのコンパイラは、tscコマンドで実行が可能となる。 npmでのインストールが完了しているか確認するためには、以下のバージョン確認用コマンドを利用する
tsc --version TypeScript対応エディタ TypeScriptの対応エディタとしては、基本的にはJavaScriptに対応しているものであれば問題はない。 現在、TypeScriptを開発・メンテナンスしているのがMicrosoftであるため、
 VisualStudio VisualStudio Code  のどちらかを利用すると良いだろう。VisualStudioシリーズ公式サイト
他にも、
 WebStorm Eclipse NetBeans  などのIDEや、
 Sublime Text Emacs Atom  などの高機能エディタも対応している。
ちなみに、VisualStudio2019はNode.jsを自動インストールするため、マシンスペックなどに余裕がある場合はVisualStudio、単純に動かすだけで良い・環境構築は自分でできるということであればVisualStudio Codeという選択をお勧めする。
TypeScriptの実行 TypeScriptの実行は、以下の手順で行う。
mermaid.initialize({startOnLoad:true}); graph LR; A[TypeScriptによる
コードの作成] -- B[コンパイラでJavaScriptの
jsファイルへ変換] B -- C[JavaScript実行環境へ</description>
    </item>
    
    <item>
      <title>Homebrewのインストール</title>
      <link>https://midsatoh.github.io/mac/homebrew/</link>
      <pubDate>Wed, 04 Dec 2019 15:13:09 +0900</pubDate>
      
      <guid>https://midsatoh.github.io/mac/homebrew/</guid>
      <description>Homebrewとは Homebrewとは、Macで開発を行う場合のパッケージ管理ツールである。 ただし、Homebrewを使用する場合は
 XCodeまたはApple DeveloperサイトからXCodeコマンドラインツールのインストール インターネットへの安定した接続環境  が前提となる。 XCodeをインストールしている場合は問題がないが、XCodeはMacOSおよびiOS、iPadOS開発用の統合開発環境であるためサイズがかなり大きい。 マシンスペックなどの問題でXCodeをインストールできない場合は、軽量なXCode小マンドラインツールをインストールする必要がある。
XCodeコマンドラインツールのインストール XCodeコマンドラインツールは、Appleの開発者用サイトからダウンロード可能である。 その際には、Appleアカウントが必要となる。
Apple Developer Site：https://developer.apple.com/develop/
ダウンロードリンクを押すと、Appleアカウントでのログインが求められる。 ログインするとツールの検索画面となるので、検索画面に「command line」、ReleaseDateを降順にすると最新版のツールを探すことが可能となる。betaがついていないツールをダウンロードすると良い。
ダウンロードしたpkgファイルを利用し、インストールする。
Homebrewのインストール 初めて使用する場合は、以下のサイトからインストールコマンドをコピーして、ターミナルに貼り付けて実行することでインストールが可能。
Homebrew</description>
    </item>
    
  </channel>
</rss>